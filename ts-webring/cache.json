{
  "https://drewdevault.com/blog/index.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "Hyprland is a toxic community",
      "url": "https://drewdevault.com/2023/09/17/Hyprland-toxicity.html",
      "date": "2023-09-17T00:00:00.000Z",
      "source": { "url": "https://drewdevault.com/blog/index.xml", "title": "" },
      "preview": "Hyprland is an open source Wayland compositor based on wlroots, a\nproject I started back in 2017 to make it easier to build good Wayland\ncompositors. It’s a project which is loved by its users for its emphasis on\ncustomization and “eye candy” – beautiful graphics and animations, each\nconfiguration tailored to the unique look and feel imagined by the user who\ncreates it. It’s a very exciting project!\nUnfortunately, the effect is spoilt by an incredibly toxic and hateful\ncommunity. I cannot recommend Hyprland to anyone who is not prepared to steer\nwell clear of its community spaces. Imagine a high school boys’ locker room come\nto life on Discord and GitHub and you’ll get an idea of what it’s like.\nI became aware of the issues with Hyprland’s community after details of numerous\nhateful incidents on their Discord came to my attention by way of  the\ngrapevine. Most of them stem from the community’s tolerance of hate: community\nmembers are allowed to express hateful views with impunity, up to and including\nastonishing views such as endorsements of eugenics and calls for hate-motivated\nviolence. Such comments are treated as another act in the one big inside joke\nthat is the Hyprland community – the community prefers not to take itself “too\nseriously”. Hate is moderated only if it is “disruptive” (e.g. presents as\nspam), but hate presented with a veneer of decorum (or sarcasm) is tolerated,\nand when challenged, it’s laughed off as a joke.\nIn one particular incident, the moderators of the Discord server engaged in a\nharassment campaign against a transgender user, including using their moderator\nprivileges to edit the pronouns in their username from “they/she” to\n“who/cares”. These roles should be held by trusted community leaders, and it’s\nfrom their behavior that the community’s culture and norms stem – they set an\nexample for the community and define what behaviors are acceptable or expected.\nThe problem comes from the top down.\nSomeone recently pitched a code of conduct – something that this project sorely\nneeds – in a GitHub issue. This thread does not have much overt hate, but\nit does clearly show how callous and just plain mean the community is,\nincluding its leadership (Vaxerski is the original author of Hyprland).\nEverything is a joke and anyone who wants to be “serious” about anything is\nmercilessly bullied and made fun of. Quoting this discussion:\nI think [a Code of Conduct] is pretty discriminatory towards people that\nprefer a close, hostile, homogeneous, exclusive, and unhealthy community.\nFirst of all, why would I pledge to uphold any values? Seems like just\ninconveniencing myself. […] If I’d want to moderate, I’d spend 90% of the\ntime reading kids arguing about bullshit instead of coding.\nIf you don’t know how to behave without a wall of text explaining how to\nbehave online then you shouldn’t be online.\nI am not someone who believes all projects need a code of conduct, if there\nexists a reasonable standard of conduct in its absence – and that means having\na community that does not bully and harass others for expressing differing\npoints of view, let alone for simply having a marginalized identity.\nI would have preferred to address these matters in private, so I reached out to\nVaxry in February. He responded with a lack of critical awareness over how\ntoxicity presents in his community. However, following my email, he put out a\npoll for the Discord community to see if the community members experienced\nharassment in the community – apparently 40% of respondents reported such\nexperiences. Vaxry et al implemented new moderation policies as a result. But\nthese changes did not seem to work: the problems are still present, and the\ncommunity is still a toxic place that facilitates bullying and hate, including\nfrom the community leaders.\nFollowing my email conversation with Vaxry, he appeared on a podcast to\ndiscuss toxicity in the Hyprland community. This quote from the interview\nclearly illustrates the attitude of the leadership:\n[A trans person] joined the Discord server and made a big deal out of their\npronouns [..] because they put their pronouns in their nickname and made a big\ndeal out of them because people were referring to them as “he” [misgendering\nthem], which, on the Internet, let’s be real, is the default. And so, one\nof the moderators changed the pronouns in their nickname to “who/cares”. […]\nLet’s be real, this isn’t like, calling someone the N-word or something.\nLater he describes a more moderated community (the /r/unixporn discord server)\nas having an environment in which everyone is going to “lick your butthole just\nto be nice”. He compared himself to Terry Davis, the late operating system\ndeveloper whose struggles with mental illness were broadcast for the world to\nsee, citing a video in which he answers a phone call and refers to the person on\nthe phone by the N-word “ten times” – Vaxry compares this to his approach to\nanswering “stupid questions”.\nIt really disappoints me to see such an exciting project brought low by a\nhorribly mismanaged community of hate and bullying. Part of what makes open\nsource software great is that it’s great for everyone. It’s unfortunate that\nsomeone can discover this cool project, install it and play with it and get\nexcited about it, then join the community to find themselves at the wrong end of\nthis behavior. No one deserves that.\nI empathise with Vaxry. I remember being young, smart, productive… and mean. I\ndid some cool stuff, but I deeply regret the way I treated people. It wasn’t\nreally my fault – I was a product of my environment – but it was my\nresponsibility. Today, I’m proud to have built many welcoming communities, where\npeople are rewarded for their involvement, rather than coming away from their\nexperience hurt. What motivates us to build and give away free software if not\nbringing joy to ourselves and others? Can we be proud of a community which\nbrings more suffering into the world?\nMy advice to the leadership begins with taking a serious look in the mirror.\nThis project needs a “come to Jesus” moment. Ask yourself what kind of community\nyou can be proud of – can you be proud of a community that people walk away\nfrom feeling dejected and hurt? Yours is not a community that brings people joy.\nWhat are you going to do about it?\nA good start will be to consider the code of conduct proposal seriously, but a\nchange of attitude is also required. My inbox is open to any of the\nleaders in this project (or any other project facing similar problems) if you\nwant to talk. I’m happy to chat with you in good faith and help you understand\nwhat’s needed and why it’s important.\nTo members of the Hyprland community, I want each of you to personally step\nup to make the community better. If you see hate and bullying, don’t stay\nsilent. This is a community which proclaims to value radical free speech: test\nit by using your speech to argue against hate. Participate in the community as\nyou think it should be, not as it necessarily is, and change will follow. If you\nare sensitive to hate, or a member of a marginalized group, however, I would\njust advise steering clear of Hyprland until the community improves.\nIf the leadership fails to account for these problems, it will be up to the\ncommunity to take their activity elsewhere. You could set up adjacent\ncommunities which are less toxic, or fork the software, or simply choose to use\nsomething else.\nTo the victims of harassment, I offer my sincere condolences. I know how\nhard it is to be the subject of this kind of bullying. You don’t deserve to be\ntreated like this. There are many places in the free software community where\nyou are welcome and celebrated – Hyprland is not the norm. If you need\nsupport, I’m always available to listen to your struggles.\nTo everyone else: please share this post throughout the Hyprland community and\nadjacent communities. This is a serious problem and it’s not going to change\nunless its clearly brought to light. The Hyprland maintainers need to be made\naware that the broader open source community does not appreciate this kind of\nbehavior.\nI sincerely hope that this project improves its community. A serious attitude\nshift is needed from the top-down, and I hope for the sake of Vaxry, the other\nleaders, and the community as a whole, that such change comes sooner rather than\nlater. When Vaxry is older and wiser, I want him to look back on the project and\ncommunity that he’s built with pride and joy, not with regret and shame.\nVaxry has published a\nresponse to this post.\nI was also privately provided some of the enusing discussion from the Hyprland\nDiscord. Consider that this lacks context and apply your grain of salt\naccordingly.\n\n\nI apologise to Vaxry for interrupting their rest, and wish them a speedy\nrecovery.\n\nHere\nis a plain text log which includes some additional discussion."
    }
  },
  "https://danluu.com/atom.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "Windows: a software engineering odyssey",
      "url": "https://danluu.com/microsoft-culture/",
      "date": "2000-01-01T00:00:00.000Z",
      "source": { "url": "https://danluu.com/atom.xml", "title": "" },
      "preview": "This is a text transcription of the slides from the \"Windows: a software engineering odyssey\" talk given on Microsoft culture by Mark Lucovsky in 2000. This is hosted here because I wanted to link to the slides, but the only formats available online were powerpoint and slide-per-page HTML where each page is basically a screenshot of a powerpoint slide. If you're looking for something on current Microsoft culture, try these links.\nAgenda\nHistory of NT\nDesign Goals/Culture\nNT 3.1 vs. Win2k\nThe next 10 years\nNT timeline: first 10 years\n2/89: Coding begins\n7/93: NT 3.1 ships\n9/94: NT 3.5 ships\n5/95: NT 3.51 ships\n7/96: NT 4.0 ships\n12/99: NT 5.0 a.k.a. Windows 2000 ships\nUnix timeline: first 20 years\n69: coding begins\n71: first edition -- PDP 11/20\n73: fourth edition -- rewritten in C\n75: fifth edition -- leaves Bell Labs, basis for BSD 1.x\n79 -- one of the best\n82 System III\n84 4.2 BSD\n89 SVR4 unification of Xenix, BSD, System V\n\n\nNT development begins\n\n\n\nHistory of NT\nTeam forms 11/89\nSix guys from DEC\nOne guy from MS\nBuilt from the ground up\n\n\nAdvanced PC OS\nDesigned for desktop & server\nSecure, scalable, SMP design\nAll new code\n\nSchedule: 18 months (only missed our date by 3 years)\nHistory of NT, cont.\nInitial effort targeted at Intel i860 code-named N10, hence the name NT which doubled as N-Ten and New Technology\nMost dev done on i860 simulator running OS/2 1.2\nMicrosoft built a single board i860 computer code-named Dazzle, including the supporting chipset; ran full kernel, memory management, etc. on the machine\nCompiler came from Metaware with weekly UUCP updates sent to my Sun-4/200\nMS wrote a PE/Coff linker and a graphical cross debugger\nDesign longevity\nOS code has a long lifetime\nYou have to base your OS on solid design principles\nYou have to set goals; not everything can be at the top of the list\nYou have to design for evolution in hardware, usage patterns, etc.\nOnly way to succeed is to base your design on a solid architectural foundation\nDevelopment environments never get enough attention\nGoal setting\nFirst job was to establish high level goals\n\n\nPortability: ability to target more than one processor, avoid assembler, abstract away machine dependencies. Purposely started the i386 port very late to avoid falling into a typical Microsoft x86 centric design\nReliability: nothing should be able to crash the OS. Anything that crashes the OS is a bug. Very radical thinking inside MS considering Win16 was co-operative multi-tasking in a single address space, and OS/2 had similar attributes with respect to memory isolation\nExtensibility: ability to extend OS over time\nCompatibility: with DOS, OS/2, POSIX, or other popular runtimes; this is the foundation work that allowed us to invent windows two years into NT OS/2 development\nperformance: all of the above are more important than raw speed!\n\n\n\nNS OS/2 design workbook\nDesign of executive captured in functional specs\nWritten by engineers, for engineers\nEvery functional interface was defined and reviewed\nSmall teams can do this efficiently\n\n\nMaking this process scale is an almost impossible challenge\nSenior developers are inundated with spec reviews and the value of their feedback becomes meaningless\nYou have to spread review duties broadly and everyone must share the culture\n\n\n\nDeveloping a culture\nTo scale a dev team, you need to establish a culture\n\n\nCommon way of evaluating designs, making tradeoffs, etc.\nCommon way of developing code and reacting to problems (build breaks, critical bugs, etc.)\nCommon way of establishing ownership of problems\n\nGoal setting can be the foundation for the culture\nKeeping culture alive as a team grows is a huge challenge\nThe NT culture\nPortability, reliability, security, and extensibility ingrained as the teams top priority\n\n\nEvery decision was made in the context of these design goals\n\nEveryone owns all the code, so whenever something is busted anyone has a right and a duty to fix it\n\n\nWorks in small groups (< 150 people) where people cover for each other\nFails miserably in large groups\n\nSloppiness is not tolerated\n\n\nGreat idea, but very difficult to nurture as group grows\nAbuse and intimidation gets way out of control; can't keep calling people stupid and except them to listen\n\nA successful culture has to accept that mistakes will happen\nNT 3.1 vs. Windows 2000\nDev teams\nSource control\nProcess management\nSerialized development\nDefects\nDevelopment team\nNT 3.1\n\n\nStarts small (6), slowly grows to 200 people\nNT culture was commonly understood by all\n\nWindows 2000\n\n\nMass assimilation of other teams into the NT team\nNT 4.0 had 800 developers, Windows 2000 had 1400\nOriginal NT culture practiced by the old timers in the group, but keeping the culture alive was difficult due to growth, physical separation, etc.\nDiluted culture leads to conflict\n\n\nAccountability: I don't \"own\" the code that is busted, see Mark!\nreliability vs. new features\n64-bit portability vs. new features\n\n\nSource control system (NT 3.1)\nInternally developed, maintained by a non-NT tools team\n\n\nNo branch capability, but not needed for small team\n\n10-12 well isolated source \"projects\", 6M LOC\nInformal project separation worked well\n\n\nminimal obscure source level dependencies\n\nSmall hard drive could easily hold entire source tree\nDeveloper could easily stay in sync with changes made to the system\nSource control system (Windows 2000)\nWindows team takes ownership of source control system, which is on life support\nBranch capability sorely needed, tree copies used as substitutes, so merging is a nightmare\n180 source \"projects\", 29M LOC\nNo project separation, reaching \"up and over\" was very common as developers tried to minimize what they had to carry on their machines to get their jobs done\nFull source base required about 50Gb of disk space\nTo keep a machine in sync was a huge chore (1 week to set up, 2 hours per day to sync)\nProcess management (NT 3.1)\nSafe sync period in effect for 4 hours each day; all other times, the rule is check-in when ready\nBuild lab syncs during morning safe sync period, which starts a complete build\n\n\nBuild breaks are corrected manually during the build process (1-2 breaks were normal)\n\nComplete build time is 5 hours on 486/50\nBuild is boot tested with some very minimal testing before release to stress testing\n\n\nDefects corrected with incremental build fixed\n\n4pm, stress testing on ~100 machines begins\nProcess management (Windows 2000)\nDevelopers not allowed to change source tree without explicit, email/written permission\n\n\nBuild lab manually approves each check-in using a combination of email, web, and a bug tracking database\n\nBuild lab approves about 100 changes each day and manually issues the appropriate sync and build commands\n\n\nBuild breaks are corrected manually; when they occur, all further build processing is halted\nA developer that mistypes a build instruction can stop the build lab, which stops over 5000 people\n\nComplete build time is 8 hours on 4-way PIII Xeon 550 with 50Gb disk and 512k cache\nBuild is boot tested and assuming we get a boot, extensive baseline testing begins\n\n\nTesting is a mostly manual, semi-automated process\nDefects occurring in the boot or test phase must be corrected before the build is \"released\" for stress testing\n\n4pm, stress testing on ~1000 machines begins\nTeam size\nProduct\nDevs\nTesters\n\n\n\n\n\nNT 3.1\n200\n140\n\n\n\nNT 3.5\n300\n230\n\n\n\nNT 3.51\n450\n325\n\n\n\nNT 4.0\n800\n700\n\n\n\nWin2k\n1400\n1700\n\n\n\n\nSerialized Development\nThe model from NT 3.1 to 2000\nAll developers on team check in to a single main line branch\nMaster build lab syncs to main branch and builds releases from that branch\nChecked in defect affects everyone waiting for results\nDefect rates and serialization\nCompile time or run time bugs that occur in a dev's office only affect that dev\nOnce a defect is checked in, the number of people affected by the defect increases\nBest devs are going to check in a runtime or compile time mistake at least twice a year\nBest devs will be able to code with a checked in compile time or run time break very quickly (20 minutes end-to-end)\nAs the code base gets larger, and as the team gets larger, these numbers typically double\nDefect rates data\nWith serialized development\n\n\nGood, small, teams operate efficiently\nEven the absolute best large teams are always broken and always serialized\n\n\n\n\n\n\n\n\nProduct\nTeam #\nDefects/dev-yr\nFix time / defect\nDefects / day\nTotal fix time\n\n\n\n\n\nNT 3.1\n200\n2\n20m\n1\n20m\n\n\n\nNT 3.5\n300\n2\n25m\n1.6\n41m\n\n\n\nNT 3.51\n450\n2\n30m\n2.5\n1.2h\n\n\n\nNT 4.0\n800\n3\n35m\n6.6\n3.8h\n\n\n\nWin2k\n1400\n4\n40m\n15.3\n10.2h\n\n\n\n\nDev environment summary\nNT 3.1\n\n\nFast and loose; lots of fun & energy\nFew barriers to getting work done\nDefects serialized as parts of the process, but didn't stop the whole machine; minimal downtime\n\nWindows 2000\n\n\nSource control system bursting at the seams\nExcessive process management serialized the entire dev process; 1 defect stops 1400 devs, 5000 team members\nResource required to build a complete instance of NT were excessive, giving few developers a way to be sucessful\n\n\n\nFocused fixes\nSource control\nSource code restructuring\nMake the large team work like a set of small teams\n\n\nWindows is already organized into reasonable sized dev teams\nGoal is to allow these teams to work as a team when contributing source code changes rather than as a group of individuals that happen to work for the same VP\nParallel development, team level independence\n\nAutomated builds\nSource control system\nNew system identified 3/99 (SourceDepot)\nNative branch support\nScalable high speed client-server architecture\nNew machine setup 3 hours vs. 1 week\nNormal sync 5 minutes vs. 2 hours\nTransition to SourceDepot done on live Win2k code base\nHand built SLM -> SourceDepot migration system allowed us to keep in sync with the old system while transitioning to SourceDepot without changing the code layout.\nSource code restructuring\n16 depots for covering each major area of source code\nOrganization is focused on:\n\n\nMinimizing cross project dependencies to reduce defect rate\nSizing projects to compile in a reasonable about of time\nTo build a project, all you need is the code for that project and that public/root project\nCross project sharing is explicit\n\n\n\nNew tree layout\nThe new tree layout features\n\n\nRoot project houses public\n15 additional projects hang off the root\nNo nested projects\nAll projects build independently\nCross project dependencies resolved via public, public/internal usnig checked in interfaces\n\n\n\nTeam level independence\nEach team determines its own check-in policy, enable rapid, frequent check ins\nTeams are isolated from mistakes by other teams\n\n\nWhen errors occur, only the tema causing the error is affected\nA build, boot, or test break only affects a small subset of the product group\n\nEach team has their own view of the source tree, their own mini build lab, and builds and entire installable build\nAny developer with adequate resources can easily duplicate a mini build lab\n\n\nBuild and release a completely installable Windows system\n\nTeams integrate their changes into the \"main\" trunk one at a time, so there is a high degree of accountability when something goes wrong in \"main\"\nBuild breaks will happen, but they are easily localized to the branch level, not the main product codeline\nTeams are isolated from mistakes made by other teams\n\n\nWhen errors occur, they affect smaller teams\nA build, boot, or test break only affects a small subset of the Windows development team\n\nEach team has their own view of the source tree and their own mini buikld lab\n\n\nEach team's lab is enlisted in all projects and builds all projects\nEach team needs resources able to build an NT system\n\nEach team's build lab builds, tests, and mini-bvt's a complete standalone system\nAutomated builds\nBuild lab runs 100% hands off\n10am and 10pm full sync and full build\n\n\nBuild failures are auto detected and mailed to the team\nSucessful builds are automatically released with automatic notification to the team\n\nEach VBL can build:\n\n\n4 platforms (x86 fre/chk, ia64 fre/chk) = 8 builkds/day, 56/week\nNo manual steps at all\n7 VBLs in Win2k group\nMajority of builds work, but failures when they occur are isolated to a single team\n\n\n\nProductivity gains\nDevelopers can easily switch from working on release N to release N+1\nDevelopers in one team will not be impacted by mistakes/changes made by other teams\nDevelopers have long, frequent checkin windows (Base team has 24x7 checkin window with manual approval used during Win2k)\nSource control system is fast and reliable\nTesting is done on complete builds instead of assorted collections of private binaries\n\n\nWhat is in the source control system is what is tested"
    }
  },
  "https://jakelazaroff.com/rss.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "Starting at Recurse Center",
      "url": "https://jakelazaroff.com/words/starting-at-recurse-center/",
      "date": "2023-08-07T00:00:00.000Z",
      "source": { "url": "https://jakelazaroff.com/rss.xml", "title": "" },
      "preview": "Breaking character for a life update: I'm doing a batch at the Recurse Center!"
    }
  },
  "https://awesomekling.github.io/feed.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "Smarter C/C++ inlining with __attribute__((flatten))",
      "url": "https://awesomekling.github.io/Smarter-C++-inlining-with-attribute-flatten/",
      "date": "2020-04-27T00:00:00.000Z",
      "source": { "url": "https://awesomekling.github.io/feed.xml", "title": "" },
      "preview": "This post describes a compile-time technique for getting the benefits of aggressive inlining in hot code while protecting cool code from its downsides.\nHello friends!\nA common technique for improving performance of hot code in C/C++ is to inline the hottest functions called. While it often helps make things faster, there are some downsides to inlining. Let’s quickly review the pros & cons:\nPros of inlining:\nRemoves function call overhead (yay!)\nMay reveal additional optimization opportunities (sometimes yay!)\nCons of inlining:\nIncreases program size (boo!)\nMay reduce cache locality (sometimes boo!)\nMay increase build times (boo!)\nWhen compiling with optimizations, the compiler usually makes pretty reasonable choices about which functions to inline. It uses a combination of heuristics, with function size being the most important one AFAIK.\nManual inlining with __attribute__((always_inline))\nHowever, sometimes you know some code is hot and the compiler has no idea. This is usually when __attribute__((always_inline)) comes in. If you add this attribute to a function, that function will now be inlined wherever it is called, even when the compiler would normally have dismissed it as too large. (Note that there are exceptions to this, and some functions cannot be inlined.)\nHere’s a contrived example of a very common scenario in larger codebases:\n\n__attribute__((always_inline)) inline void do_thing(int input)\n{\n    // this code is always inlined at the call site\n}\n\nvoid hot_code()\n{\n    // the program spends >80% of its runtime in this function\n    while (condition) {\n        ...\n        do_thing(y);\n        ...\n    }\n}\n\n\nThe above is all well and good, but what happens when do_thing() is a popular function that gets called a lot?\n\nvoid cool_code()\n{\n    // the program spends <5% of its runtime in this function\n    ...\n    do_thing(a);\n    do_thing(b);\n    do_thing(c);\n}\n\n\nNow the cool_code() function gets three copies of do_thing() inlined into it, invoking all of the cons from the list we made above (larger program size, worse cache locality, longer build time.)\nTargeted flattening instead of global inlining\nNow for the trick! Both GCC and Clang support __attribute__((flatten)). Putting it on a function causes all of its callees to be inlined into it. It’s dead simple.\n\nvoid do_thing(int input)\n{\n    // this code is not always inlined at the call site\n}\n\n__attribute__((flatten)) void hot_code()\n{\n    // the program spends >80% of its runtime in this function\n    while (condition) {\n        call_something();   // inlined!\n        do_thing(y);        // inlined!\n        other_thing();      // also inlined!\n    }\n}\n\nvoid cool_code()\n{\n    // the program spends <5% of its runtime in this function\n    ...\n    do_thing(a);            // not inlined!\n    do_thing(b);            // not inlined!\n    do_thing(c);            // guess!\n}\n\n\nNote: Functions with __attribute__((noinline)) will not be inlined. The same goes for functions where the compiler can’t see the body.\nIn conclusion\n__attribute__((flatten)) lets you opt in to the pros of aggressive inlining on a per-function basis, while protecting the rest of your program from the cons!\nUntil next time! :^)"
    }
  },
  "https://xeiaso.net/blog.rss": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "I somehow managed to lock myself out of my Authy secrets",
      "url": "https://xeiaso.net/notes/2024/authy-fuckup/",
      "date": "2024-04-21T00:00:00.000Z",
      "source": { "url": "https://xeiaso.net/blog.rss", "title": "" }
    }
  },
  "https://ciechanow.ski/atom.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "Bicycle",
      "url": "https://ciechanow.ski/bicycle/",
      "date": "2023-03-28T12:00:00.000Z",
      "source": { "url": "https://ciechanow.ski/atom.xml", "title": "" },
      "preview": "There is something delightful about riding a bicycle. Once mastered, the simple action of pedaling to move forward and turning the handlebars to steer makes bike riding an effortless activity. In the demonstration below, you can guide the rider with the slider, and you can also drag the view around to change the camera angle:\n  Compared to internal combustion engines or mechanical watches, bicycles are fairly simple machines – most of their parts operate in plain sight.\nThis article has many interactive demonstrations which are best seen on the website."
    }
  },
  "https://explained-from-first-principles.com/feed.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "The Internet explained from first principles",
      "url": "https://explained-from-first-principles.com/internet/",
      "date": "2020-08-05T00:00:00.000Z",
      "source": { "url": "https://explained-from-first-principles.com/feed.xml", "title": "" }
    }
  },
  "https://samwho.dev/rss.xml": {
    "timestamp": "2024-05-30T05:19:43.853Z",
    "data": {
      "title": "API Design: In The Wild (part 2)",
      "url": "https://samwho.dev/blog/api-design-in-the-wild-part-2/",
      "date": "2019-05-19T00:00:00.000Z",
      "source": { "url": "https://samwho.dev/rss.xml", "title": "" },
      "preview": "In a previous post we looked at some real-world APIs, highlighting the good and the bad, and in this post we’re going to do the same!\n#\nPython’s datetime.datetime\nMost experienced Pythonistas have written something like this at some point in their career:\nimport datetime\nnow = datetime.datetime.now()\nprint(now)\n\nWhile not incorrect, the repeated naming is jarring.\nGo specifically calls this out in a blog post on package naming, and I don’t think I could possibly improve on it so I’ll quote it verbatim:\nAvoid stutter. Since client code uses the package name as a prefix when referring to the package contents, the names for those contents need not repeat the package name. The HTTP server provided by the http package is called Server, not HTTPServer. Client code refers to this type as http.Server, so there is no ambiguity.\nYou can combat the stuttering somewhat using Python’s from x import y syntax:\nfrom datetime import datetime\nnow = datetime.now()\nprint(now)\n\nAs a fun little extra, a friend sent me the following bit of Ruby:\nfiles = Dir.entries(Dir.pwd)\nfiles.select! { |file| File.file?(file) }\n\n\n#\nJava’s URL.equals method\nIf you were going to test two URLs for equality, how might you do it?\nIt’s completely reasonable to do a comparison of the string representations. ”https://google.com” != “https://facebook.com”. This isn’t the road the original authors of Java’s URL class took, though.\nimport java.net.URL;\n\npublic final class Main {\n  public static void main(String... args) throws Exception {\n    URL a = new URL(\"https://google.com\");\n    URL b = new URL(\"https://google.com\");\n    System.out.println(a.equals(b));\n  }\n}\n\nDoes this always return true?\nSadly not.\njava.net.URL.equals, through a long chain of indirection, ends up calling java.net.InetAddress.getByName for both of the URLs, which performs a DNS lookup in order to check that they resolve to the same IP address. It does have a cache, but if you’re super unlucky and the cache expires between the two lookups, it’s possible for you to get two different IP addresses for the same hostname if that hostname uses DNS round robin, which is common in 2019.\nSimilar to java.io.File.exists, this method doesn’t quite do what it advertises to do. Because of this, and the fact it makes a blocking network call, it’s flagged by static analysis tools.\n#\nGo’s standard library\nI hesitated to add this section, as it’s fairly controversial, but I do think there’s a real problem here.\nGo’s standard library is missing some key things I’d expect to find in a standard library. The desire to keep the language implementation and usage simple has shifted burden from the language implementor to the language user.\nFor example, checking that a list has a specific element is not something the language provides for you. If you were to look it up, the attitude you find is that methods like this are trivial to write. While true, I find myself frequently looking up and copy-pasting trivial methods on a weekly basis.\nEfforts to add common operations to the standard library are appreciated, but often clunky. Getting an absolute value requires you to cast to and from a float64. Sorting an array requires you to sacrifice type safety and supply your own swapping function. Creating a big int has a method per type that you can create them from, appending the type to the method name.\nThe addition of generics and method overloading, while complicating the language and its implementation, would make life easier for users of the language.\n#\nThe word “filter”\nHow would you define the word “filter” in general use? Most people, myself included, thinking of removing things. Impurities from metal, dirt from gold, water from pasta.\nSo what does this return?\nlist(filter(lambda n: n > 5, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\nIf you guessed “a list containing all numbers greater than 5”, you would be correct.\nI find this confusing. I have to check which way filter works almost every time I use it, even though in the research I did for this post I learned that filter works the same way in every language I checked.\nI like the approach Ruby takes to this problem:\nlist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist.select { |n| n > 5 } # [7, 8, 8, 9]\nlist.reject { |n| n <= 5 } # [0, 1, 2, 3, 4, 5]\n\nselect and reject are more immediately obvious, and good general words for these use cases. At least they’re better than filterfalse.\n#\nConclusion\nAnother post, another set of real-world API examples and suggestions on improving them.\nI’d love to hear your thoughts, and if you have any APIs you love or hate I’d love to hear about them as well!"
    }
  }
}
